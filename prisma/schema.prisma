generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ProgressStatus {
  CREATED
  IN_PROGRESS
  DONE
}

enum MemberStatus {
  ACTIVE
  PENDING
  INACTIVE
}

enum FollowRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model User {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  email     String          @unique
  name      String
  picture   String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  projects  Project[]
  members   Member[]
  likes     Like[]
  comments  Comment[]
  followers FollowRequest[]
}

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     String    @db.ObjectId
  owner       User      @relation(fields: [ownerId], references: [id])
  tasks       Task[]
  members     Member[]
  likes       Like[]
  comments    Comment[]
}

model Task {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  status      ProgressStatus @default(CREATED)
  projectId   String         @db.ObjectId
  project     Project        @relation(fields: [projectId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Member {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  status    MemberStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  Project   Project?     @relation(fields: [projectId], references: [id])
  projectId String?      @db.ObjectId
  User      User?        @relation(fields: [userId], references: [id])
  userId    String?      @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?  @db.ObjectId
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?  @db.ObjectId
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model FollowRequest {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime            @default(now())
  targetUserId String?
  User         User?               @relation(fields: [userId], references: [id])
  userId       String?             @db.ObjectId
  status       FollowRequestStatus @default(PENDING)
}
